=head1 NAME

BSD::Process::Affinity - Manipulate CPU affinities on FreeBSD

=head1 SYNOPSIS

	use BSD::Process::Affinity;
	BSD::Process::Affinity->get_process_mask()->set(0x2)->update();

=head1 VERSION INCOMPABILITY

Version 0.4 has API partly incompatible with previous releases. Here are differences:

=over 2

=item *

Functional interface is removed, only OO is available now

=item *

Lighten API - no more Bit::Vector object manipulations

=item *

C<from_num> method is renamed to C<set>, but for one more release is available under it's old name.

=back

=head1 DESCRIPTION

Ability to manage CPU affinities from userland was a long-awaited feature
in FreeBSD, and it is finally available since 7.1 release. This module allows 
you to programmatically manipulate them from perl level.

FreeBSD gives you three levels of restricting CPUs for a single process/thread:

=over 2

=item *

'Root' sets - they are set either for a whole system (and containing all processors), or for a jail. 
You can get root set to see at which processors can your process theoretically run.

=item *

Effetive process set - each process is a member of some set (otherwise, it wouldnt't be able run at all, heh).
Many processes can be members of a single set, so altering such set - you alter many processes.
These sets are only for processes, not for threads - threads can only manipulate with anonymous masks, and 
has effective set of parent process.

=item *

Per-process and per-thread anonymous masks. Each process can get/set it's own (or not own at all) mask,
restricting available processors. Manipulating these masks is recommended way in manpages for
application developers, when you want to set affinity just for a single process.

=back

Beware, when manipulating affinities, you may degrade performance instead of gaining it.

=head1 INTERFACE

To operate with this module, you should do three steps:

=over 2

=item *

Fetch an Affinity object for interesting kernel object (either old or new one)

=item *

Update it's internal state (or just fetch it)

=item *

If required, write changes back to the kernel using C<update> method.

=back

Here is an example that makes current thread NOT to run on 2nd processor in system:

	use BSD::Process::Affinity;
	my $obj = BSD::Process::Affinity->get_thread_mask();
	$obj->set($obj->get() & ~0x2)->update();

Note the chainable ability of C<update>.

Whenever any error occurs, this module croaks.

=head1 Get Affinity object

All these methods (except for C<clone>) expects one parameter - an id of object you want to
fetch affinity of. You can just ommit it - this means 'give data for the current process/thread/whatever'.

=head2 C<clone>

Clones current process'es effective set, and makes current process member of just created set.

=head2 C<rootof_set>

Gets 'root' set for a given set id.

=head2 C<rootof_pid>

Gets 'root' set for a given process id.

=head2 C<current_set>

Gets set content by given set id.

=head2 C<current_pid>

Gets effetive set for a given process id.

=head2 C<get_thread_mask>

Get anonymous mask for a given thread id (not perl's thread id, but a system thread id).

=head2 C<get_process_mask>

Get anonymous mask for a given process id.

=head1 Processors' mask manipulation

Here are existing Affinity object methods.

=head2 C<update>

	$affinity->update();

Writes back to kernel changes made in set content. Without this call, your changes does not 
affect anything.

=head2 C<assign>

	$affinity->assign($pid);

Assigns set specifiyed in $affinity object to be an effective set for process $pid. 

It is an error to apply this method to anonymous masks.

=head2 C<get_cpusetid>

	my $n = $affinity->get_cpusetid();

Returns cpu set internal id - for usage with rootof_set/current_set. Returns
zero for anonymous masks.

=head2 C<get>

	my $value = $affinity->get();

Returns usigned integer representing current mask. Then you can perform any
actions with it, and set it back using C<set> method. Lowest (rightmost) bit represents 
CPU0, and so on.

=head2 C<set>

	$affinity->set(0x5);  #run on CPU0 and CPU2

Loads mask represented by $mask into object. Note that you have to call C<update> to save 
changes to kernel, that is not done automatically. 

Mask is treated as an unsigned integer, so number of processor it can represent depends on 
OS arccitecture - 32 or 64 bits.

This method is chainable with C<update>.

=head1 C<SEE ALSO>

L<http://www.freebsd.org/cgi/man.cgi?query=cpuset_getaffinity>

L<http://www.freebsd.org/cgi/man.cgi?query=cpuset>

=head1 AUTHOR

Sergey Aleynikov <sergey.aleynikov@gmail.com>

=head1 LICENSE

Copyright (c) 2009, 2011 by Sergey Aleynikov.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

=cut
